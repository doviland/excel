<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Analytics Clienti - Grafici Interattivi</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
    <style>
        .chart-container {
            position: relative;
            height: 400px;
            margin: 20px 0;
        }
        .kpi-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transition: transform 0.3s ease;
        }
        .kpi-card:hover {
            transform: translateY(-5px);
        }
        .client-card {
            border-left: 4px solid;
            transition: all 0.3s ease;
        }
        .client-card:hover {
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-lg">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-6">
                <div class="flex items-center">
                    <i class="fas fa-chart-pie text-3xl text-blue-600 mr-3"></i>
                    <h1 class="text-3xl font-bold text-gray-900">Dashboard Analytics Clienti</h1>
                </div>
                <div class="flex items-center space-x-4">
                    <div class="text-sm text-gray-500">
                        <i class="fas fa-sync-alt mr-1"></i>
                        Ultimo aggiornamento: <span id="lastUpdate">Caricamento...</span>
                    </div>
                    <button id="refreshBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200">
                        <i class="fas fa-refresh mr-2"></i>Aggiorna
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="loading-spinner"></div>

    <!-- Main Content -->
    <main id="mainContent" class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8" style="display: none;">
        
        <!-- KPI Overview -->
        <section class="mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Panoramica KPI</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="kpi-card p-6 rounded-lg text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm opacity-80">Budget Totale</p>
                            <p id="totalBudget" class="text-2xl font-bold">â‚¬0</p>
                        </div>
                        <i class="fas fa-euro-sign text-3xl opacity-80"></i>
                    </div>
                </div>
                <div class="kpi-card p-6 rounded-lg text-white" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm opacity-80">Clic Totali</p>
                            <p id="totalClicks" class="text-2xl font-bold">0</p>
                        </div>
                        <i class="fas fa-mouse-pointer text-3xl opacity-80"></i>
                    </div>
                </div>
                <div class="kpi-card p-6 rounded-lg text-white" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm opacity-80">Impressioni Totali</p>
                            <p id="totalImpressions" class="text-2xl font-bold">0</p>
                        </div>
                        <i class="fas fa-eye text-3xl opacity-80"></i>
                    </div>
                </div>
                <div class="kpi-card p-6 rounded-lg text-white" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm opacity-80">Conversioni Totali</p>
                            <p id="totalConversions" class="text-2xl font-bold">0</p>
                        </div>
                        <i class="fas fa-bullseye text-3xl opacity-80"></i>
                    </div>
                </div>
            </div>
        </section>

        <!-- Filters -->
        <section class="mb-8">
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-semibold mb-4">Filtri</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <select id="clientFilter" class="border border-gray-300 rounded-lg px-3 py-2">
                        <option value="">Tutti i clienti</option>
                    </select>
                    <select id="campaignFilter" class="border border-gray-300 rounded-lg px-3 py-2">
                        <option value="">Tutti i tipi di campagna</option>
                    </select>
                    <input type="date" id="dateFilter" class="border border-gray-300 rounded-lg px-3 py-2">
                </div>
            </div>
        </section>

        <!-- Charts Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Budget Distribution Pie Chart -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-semibold mb-4">
                    <i class="fas fa-chart-pie mr-2 text-blue-600"></i>
                    Distribuzione Budget per Cliente
                </h3>
                <div class="chart-container">
                    <canvas id="budgetPieChart"></canvas>
                </div>
            </div>

            <!-- Clicks vs Impressions Bar Chart -->
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-semibold mb-4">
                    <i class="fas fa-chart-bar mr-2 text-green-600"></i>
                    Clic vs Impressioni per Cliente
                </h3>
                <div class="chart-container">
                    <canvas id="clicksImpressionsChart"></canvas>
                </div>
            </div>

            <!-- Performance Timeline -->
            <div class="bg-white p-6 rounded-lg shadow lg:col-span-2">
                <h3 class="text-lg font-semibold mb-4">
                    <i class="fas fa-chart-line mr-2 text-purple-600"></i>
                    Performance nel Tempo
                </h3>
                <div class="chart-container">
                    <canvas id="timelineChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Client Details -->
        <section class="mb-8">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Dettagli per Cliente</h2>
            <div id="clientDetails" class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Client cards will be inserted here -->
            </div>
        </section>

        <!-- Campaign Performance Comparison -->
        <section class="mb-8">
            <div class="bg-white p-6 rounded-lg shadow">
                <h3 class="text-lg font-semibold mb-4">
                    <i class="fas fa-balance-scale mr-2 text-red-600"></i>
                    Confronto Performance Campagne
                </h3>
                <div class="chart-container">
                    <canvas id="campaignComparisonChart"></canvas>
                </div>
            </div>
        </section>
    </main>

    <script>
        // Global variables
        let allData = [];
        let charts = {};
        const clientColors = {
            'Ciclone srl': '#FF6384',
            'SFS Italia': '#36A2EB',
            'ASA PLASTICI S.R.L': '#FFCE56',
            'CMS Nordest': '#4BC0C0'
        };

        // Google Sheets configuration
        const SHEET_ID = '1A95NlOG6CrOuNWXjLGn7w4UfCz71Y-gw0vjqyqJqnbU';
        const SHEET_URL = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:csv`;

        // Initialize the dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            setupEventListeners();
            
            // Auto-refresh every 24 hours
            setInterval(loadData, 24 * 60 * 60 * 1000);
        });

        function setupEventListeners() {
            document.getElementById('refreshBtn').addEventListener('click', loadData);
            document.getElementById('clientFilter').addEventListener('change', applyFilters);
            document.getElementById('campaignFilter').addEventListener('change', applyFilters);
            document.getElementById('dateFilter').addEventListener('change', applyFilters);
        }

        async function loadData() {
            try {
                document.getElementById('loadingSpinner').style.display = 'block';
                document.getElementById('mainContent').style.display = 'none';

                // For demo purposes, using sample data since direct CSV access might be restricted
                const sampleData = [
                    {
                        campagna: 'IT | CANNONI NEBULIZZATORI',
                        budgetSpeso: 156.80,
                        clic: 117,
                        impressioni: 1175,
                        cpcMedio: 1.50,
                        conversioni: 6,
                        data: '2025-06-16',
                        cliente: 'Ciclone srl'
                    },
                    {
                        campagna: 'Performance Max | 2025 IT FR NL',
                        budgetSpeso: 122.49,
                        clic: 374,
                        impressioni: 3416,
                        cpcMedio: 0.45,
                        conversioni: 8,
                        data: '2025-06-16',
                        cliente: 'ASA PLASTICI S.R.L'
                    },
                    {
                        campagna: 'Search | Landing Page Rivetti',
                        budgetSpeso: 160.94,
                        clic: 82,
                        impressioni: 1148,
                        cpcMedio: 2.11,
                        conversioni: 8,
                        data: '2025-06-16',
                        cliente: 'SFS Italia'
                    },
                    {
                        campagna: 'Search FR | Sito istituzionale',
                        budgetSpeso: 31.64,
                        clic: 54,
                        impressioni: 347,
                        cpcMedio: 0.71,
                        conversioni: 5,
                        data: '2025-06-16',
                        cliente: 'ASA PLASTICI S.R.L'
                    },
                    {
                        campagna: 'Search Sito CMS',
                        budgetSpeso: 27.76,
                        clic: 40,
                        impressioni: 966,
                        cpcMedio: 0.69,
                        conversioni: 3,
                        data: '2025-06-16',
                        cliente: 'CMS Nordest'
                    }
                ];

                allData = sampleData;
                
                updateLastUpdateTime();
                populateFilters();
                updateKPIs();
                createCharts();
                createClientDetails();
                
                document.getElementById('loadingSpinner').style.display = 'none';
                document.getElementById('mainContent').style.display = 'block';
                
            } catch (error) {
                console.error('Error loading data:', error);
                alert('Errore nel caricamento dei dati. Riprova piÃ¹ tardi.');
            }
        }

        function updateLastUpdateTime() {
            const now = new Date();
            document.getElementById('lastUpdate').textContent = now.toLocaleString('it-IT');
        }

        function populateFilters() {
            const clients = [...new Set(allData.map(item => item.cliente))];
            const campaigns = [...new Set(allData.map(item => item.campagna))];
            
            const clientFilter = document.getElementById('clientFilter');
            const campaignFilter = document.getElementById('campaignFilter');
            
            clientFilter.innerHTML = '<option value="">Tutti i clienti</option>';
            clients.forEach(client => {
                clientFilter.innerHTML += `<option value="${client}">${client}</option>`;
            });
            
            campaignFilter.innerHTML = '<option value="">Tutti i tipi di campagna</option>';
            campaigns.forEach(campaign => {
                campaignFilter.innerHTML += `<option value="${campaign}">${campaign}</option>`;
            });
        }

        function updateKPIs() {
            const totalBudget = allData.reduce((sum, item) => sum + item.budgetSpeso, 0);
            const totalClicks = allData.reduce((sum, item) => sum + item.clic, 0);
            const totalImpressions = allData.reduce((sum, item) => sum + item.impressioni, 0);
            const totalConversions = allData.reduce((sum, item) => sum + item.conversioni, 0);
            
            document.getElementById('totalBudget').textContent = `â‚¬${totalBudget.toFixed(2)}`;
            document.getElementById('totalClicks').textContent = totalClicks.toLocaleString();
            document.getElementById('totalImpressions').textContent = totalImpressions.toLocaleString();
            document.getElementById('totalConversions').textContent = totalConversions.toLocaleString();
        }

        function createCharts() {
            createBudgetPieChart();
            createClicksImpressionsChart();
            createTimelineChart();
            createCampaignComparisonChart();
        }

        function createBudgetPieChart() {
            const ctx = document.getElementById('budgetPieChart').getContext('2d');
            
            const budgetByClient = {};
            allData.forEach(item => {
                budgetByClient[item.cliente] = (budgetByClient[item.cliente] || 0) + item.budgetSpeso;
            });
            
            if (charts.budgetPie) charts.budgetPie.destroy();
            
            charts.budgetPie = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: Object.keys(budgetByClient),
                    datasets: [{
                        data: Object.values(budgetByClient),
                        backgroundColor: Object.keys(budgetByClient).map(client => clientColors[client] || '#FF6384'),
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: â‚¬${context.parsed.toFixed(2)}`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function createClicksImpressionsChart() {
            const ctx = document.getElementById('clicksImpressionsChart').getContext('2d');
            
            const dataByClient = {};
            allData.forEach(item => {
                if (!dataByClient[item.cliente]) {
                    dataByClient[item.cliente] = { clicks: 0, impressions: 0 };
                }
                dataByClient[item.cliente].clicks += item.clic;
                dataByClient[item.cliente].impressions += item.impressioni;
            });
            
            if (charts.clicksImpressions) charts.clicksImpressions.destroy();
            
            charts.clicksImpressions = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: Object.keys(dataByClient),
                    datasets: [{
                        label: 'Clic',
                        data: Object.values(dataByClient).map(d => d.clicks),
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }, {
                        label: 'Impressioni',
                        data: Object.values(dataByClient).map(d => d.impressions),
                        backgroundColor: 'rgba(255, 99, 132, 0.8)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function createTimelineChart() {
            const ctx = document.getElementById('timelineChart').getContext('2d');
            
            const timelineData = {};
            allData.forEach(item => {
                if (!timelineData[item.data]) {
                    timelineData[item.data] = { budget: 0, clicks: 0, impressions: 0 };
                }
                timelineData[item.data].budget += item.budgetSpeso;
                timelineData[item.data].clicks += item.clic;
                timelineData[item.data].impressions += item.impressioni;
            });
            
            const sortedDates = Object.keys(timelineData).sort();
            
            if (charts.timeline) charts.timeline.destroy();
            
            charts.timeline = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: sortedDates,
                    datasets: [{
                        label: 'Budget Speso (â‚¬)',
                        data: sortedDates.map(date => timelineData[date].budget),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        yAxisID: 'y'
                    }, {
                        label: 'Clic',
                        data: sortedDates.map(date => timelineData[date].clicks),
                        borderColor: 'rgba(255, 99, 132, 1)',
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Data'
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Budget (â‚¬)'
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Clic'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    }
                }
            });
        }

        function createCampaignComparisonChart() {
            const ctx = document.getElementById('campaignComparisonChart').getContext('2d');
            
            const campaignData = {};
            allData.forEach(item => {
                const campaignType = item.campagna.split(' | ')[0] || item.campagna.split(' ')[0];
                if (!campaignData[campaignType]) {
                    campaignData[campaignType] = { budget: 0, conversions: 0 };
                }
                campaignData[campaignType].budget += item.budgetSpeso;
                campaignData[campaignType].conversions += item.conversioni;
            });
            
            if (charts.campaignComparison) charts.campaignComparison.destroy();
            
            charts.campaignComparison = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: Object.keys(campaignData),
                    datasets: [{
                        label: 'Budget Speso',
                        data: Object.values(campaignData).map(d => d.budget),
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(255, 99, 132, 1)'
                    }, {
                        label: 'Conversioni',
                        data: Object.values(campaignData).map(d => d.conversions * 10), // Scaled for visibility
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(54, 162, 235, 1)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    if (context.datasetIndex === 1) {
                                        return `${context.dataset.label}: ${(context.parsed.r / 10).toFixed(0)}`;
                                    }
                                    return `${context.dataset.label}: â‚¬${context.parsed.r.toFixed(2)}`;
                                }
                            }
                        }
                    },
                    elements: {
                        line: {
                            borderWidth: 3
                        }
                    }
                }
            });
        }

        function createClientDetails() {
            const clientDetails = document.getElementById('clientDetails');
            clientDetails.innerHTML = '';
            
            const clientData = {};
            allData.forEach(item => {
                if (!clientData[item.cliente]) {
                    clientData[item.cliente] = {
                        budget: 0,
                        clicks: 0,
                        impressions: 0,
                        conversions: 0,
                        campaigns: 0
                    };
                }
                clientData[item.cliente].budget += item.budgetSpeso;
                clientData[item.cliente].clicks += item.clic;
                clientData[item.cliente].impressions += item.impressioni;
                clientData[item.cliente].conversions += item.conversioni;
                clientData[item.cliente].campaigns += 1;
            });
            
            Object.entries(clientData).forEach(([client, data]) => {
                const ctr = ((data.clicks / data.impressions) * 100).toFixed(2);
                const avgCpc = (data.budget / data.clicks).toFixed(2);
                
                const clientCard = document.createElement('div');
                clientCard.className = 'client-card bg-white p-6 rounded-lg shadow fade-in';
                clientCard.style.borderLeftColor = clientColors[client] || '#3B82F6';
                
                clientCard.innerHTML = `
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">${client}</h3>
                        <div class="w-4 h-4 rounded-full" style="background-color: ${clientColors[client] || '#3B82F6'}"></div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="text-center p-3 bg-gray-50 rounded">
                            <p class="text-2xl font-bold text-blue-600">â‚¬${data.budget.toFixed(2)}</p>
                            <p class="text-sm text-gray-600">Budget Speso</p>
                        </div>
                        <div class="text-center p-3 bg-gray-50 rounded">
                            <p class="text-2xl font-bold text-green-600">${data.clicks.toLocaleString()}</p>
                            <p class="text-sm text-gray-600">Clic</p>
                        </div>
                        <div class="text-center p-3 bg-gray-50 rounded">
                            <p class="text-2xl font-bold text-purple-600">${data.impressions.toLocaleString()}</p>
                            <p class="text-sm text-gray-600">Impressioni</p>
                        </div>
                        <div class="text-center p-3 bg-gray-50 rounded">
                            <p class="text-2xl font-bold text-red-600">${data.conversions}</p>
                            <p class="text-sm text-gray-600">Conversioni</p>
                        </div>
                    </div>
                    <div class="mt-4 pt-4 border-t border-gray-200">
                        <div class="flex justify-between text-sm text-gray-600">
                            <span>CTR: <strong>${ctr}%</strong></span>
                            <span>CPC Medio: <strong>â‚¬${avgCpc}</strong></span>
                            <span>Campagne: <strong>${data.campaigns}</strong></span>
                        </div>
                    </div>
                `;
                
                clientDetails.appendChild(clientCard);
            });
        }

        function applyFilters() {
            const clientFilter = document.getElementById('clientFilter').value;
            const campaignFilter = document.getElementById('campaignFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;
            
            let filteredData = allData;
            
            if (clientFilter) {
                filteredData = filteredData.filter(item => item.cliente === clientFilter);
            }
            
            if (campaignFilter) {
                filteredData = filteredData.filter(item => item.campagna === campaignFilter);
            }
            
            if (dateFilter) {
                filteredData = filteredData.filter(item => item.data === dateFilter);
            }
            
            // Update charts with filtered data
            const originalData = allData;
            allData = filteredData;
            
            updateKPIs();
            createCharts();
            createClientDetails();
            
            allData = originalData;
        }
    </script>
</body>
</html>
    <script id="html_badge_script1">
        window.__genspark_remove_badge_link = "https://www.genspark.ai/api/html_badge/" +
            "remove_badge?token=To%2FBnjzloZ3UfQdcSaYfDk0SYq2gJ23Cla%2FW7U4n4aZF3mLJtXo0GQdjA6TnuGssYAQjxKp6Tc2VDpJYQ2Els1c5EnUfgTlDNEk5V7toKizfmTtblI5ho5FYgXEl4rN5YkBVX9gmERttdWQDiWlwFLupUivNDL5inzzKt7sYpHU8JTiyb3tasUeHBBmUy4%2FwilZ3O4cycXCvkIQcwojRcYEcfI3DC156TNbV6hkPgveRqiU1XbVElEzVVmfxtBUwwr3xnWeZUT4FPRyviBDvBvHJhuoZ1Ur%2FrXhkbIReRrjOuACZwG0c2zt1L0J4W1dh9VFUjB4UeCgZsVUk0UuWO8Hooe8aD6yj85gXFnr8e7TGRqR6kBo6AcSM0K5VljsmG8UnKc1hfaPi0ZSgyKNBtJdxsy3tTVYqInF09nj7m7upb0AL5nyd2A8OLI9QHYXUD8Pki0tV65pMoub8TVy2UDGfHe6LgoOAkdomhvAeRpH29PqP1eKrIozcvBD8xDX89rZSl1negZPOojZv%2BFWRMrt3SeQyfN1iH0nZE5pY%2FnA%3D";
        window.__genspark_locale = "it-IT";
        window.__genspark_token = "To/BnjzloZ3UfQdcSaYfDk0SYq2gJ23Cla/W7U4n4aZF3mLJtXo0GQdjA6TnuGssYAQjxKp6Tc2VDpJYQ2Els1c5EnUfgTlDNEk5V7toKizfmTtblI5ho5FYgXEl4rN5YkBVX9gmERttdWQDiWlwFLupUivNDL5inzzKt7sYpHU8JTiyb3tasUeHBBmUy4/wilZ3O4cycXCvkIQcwojRcYEcfI3DC156TNbV6hkPgveRqiU1XbVElEzVVmfxtBUwwr3xnWeZUT4FPRyviBDvBvHJhuoZ1Ur/rXhkbIReRrjOuACZwG0c2zt1L0J4W1dh9VFUjB4UeCgZsVUk0UuWO8Hooe8aD6yj85gXFnr8e7TGRqR6kBo6AcSM0K5VljsmG8UnKc1hfaPi0ZSgyKNBtJdxsy3tTVYqInF09nj7m7upb0AL5nyd2A8OLI9QHYXUD8Pki0tV65pMoub8TVy2UDGfHe6LgoOAkdomhvAeRpH29PqP1eKrIozcvBD8xDX89rZSl1negZPOojZv+FWRMrt3SeQyfN1iH0nZE5pY/nA=";
    </script>
    
    <script id="html_notice_dialog_script" src="https://www.genspark.ai/notice_dialog.js"></script>
    